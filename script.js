import { appendFile, readFileSync, readdir, existsSync, truncate } from 'fs';
import { extname } from 'path';
import { optimize } from 'svgo';
const sourceFolder = './sourceSvg';
const destinationFile = './icon.exports.js';

const  asyncForEach = async (array, callback) => {
    for (let index = 0; index < array.length; index++) {
      await callback(array[index], index, array);
    }
}

const generateName = (fileName) => (fileName.split('.').slice(0, -1).join('.'))

const cleanUpSvgData = (data, name) => (
     data.replace('svg', 'svg data-test="icon-'+name+'"').replace('fill="#363636"','fill="currentColor"').replace('fill="#156EC7"','fill="currentColor"')
);

const svgTemplate = (fileName, fileData) => {
    const name = generateName(fileName);
    return(`export const ${name} = (${cleanUpSvgData(fileData, name)});\n`);
};

const copyDataToDestination = (destination, data) => new Promise ((resolve) => {
        appendFile(destination, data, (err) => {
            if (err) throw err;
            resolve();
            console.log('The "data to append" was appended to file!');
        })
    }
);

const readFile = (file) => new Promise ((resolve) => {
        const data = readFileSync(file, 'utf8', (err) => {
            if (err) throw err;
        });
        resolve(data)
    }
);

const optimizeSvg = svg => {
    const { data } = optimize(svg, {
        plugins: [
            {name: 'preset-default'},
            {name: 'removeDimensions', active: true},
            {name: 'removeXMLNS', active: true},
        ],
        js2svg: { pretty: true, indent: 2 },
    });
    return data;
};

const processFiles = async (files, destinationFile) => {
    await copyDataToDestination(destinationFile, (
`/*
    =============================================================
    This file is generated by script please do not update by hand
    =============================================================
*/\n`));
    await asyncForEach(files, async (file) => {
    if(extname(sourceFolder+'/'+file) === '.svg'){
        const readData = await readFile(sourceFolder+'/'+file);
        await copyDataToDestination(destinationFile, svgTemplate(file, optimizeSvg(readData)));
       }
    });
    console.log('Done');
}

const writeAllSvgToOneFile = (sourceFolder, destinationFile) => {
    const files = readdir(sourceFolder, (err, files) => {
        if (err) throw err;
        processFiles(files, destinationFile);
    });
}

try {
    if(existsSync(destinationFile) && readFileSync(destinationFile)) {
        console.warn('file exists -> empty file and add the svg data');
        truncate(destinationFile, 0, () => {writeAllSvgToOneFile(sourceFolder, destinationFile)});
    } else {
        writeAllSvgToOneFile(sourceFolder, destinationFile);
    }
} catch(err) {
    console.error(err)
}